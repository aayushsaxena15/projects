# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################


def index():
    if auth.user:
	    redirect(URL('homeuser'))
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simple replace the two lines below with:
    return auth.wiki()
    """
    response.flash = T("Welcome to Project-X!")
    return dict(message=T('Hello World'))


def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())
@auth.requires_login()
def homeuser():
    s=db(auth.user.id==db.auth_user.id).select(db.auth_user.first_name,db.auth_user.last_name,db.auth_user.email,db.auth_user.username,db.auth_user.Typeofuser,db.auth_user.Organisation)
    s=s[0]
    y=db(auth.user.id==db.image.imageowner).select(db.image.ALL)
    if y:
        y=y[0]
    else:
	y=None    
    response.flash="click on image to update it"
    return dict(s=s,y=y)
@auth.requires_login()
def imageupdate():
    y=db(auth.user.id==db.image.imageowner).select(db.image.ALL)
    pro=db(db.project.Username==auth.user.id).select(db.project.ALL)
	form=SQLFORM(db.image)
	if form.process().accepted:
		if y:
			for i in y:
				db(db.image.id==i.id).delete()
		response.flash="response recorded"
		redirect(URL('homeuser'))
	return dict(form=form)
@auth.requires_login()
def createproject():
    s=SQLFORM(db.Project)
    if s.process().accepted:
        response.flash="response recorded"
        redirect(URL('homeuser'))
    else:
        response.flash="create a project"
    return dict(s=s)
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
