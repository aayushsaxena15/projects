def parse_for_runs(bat, num):
	toreturn  = []
	for i in bat:
		temp = bat[i]
		k = int(temp[1])
		if k >= num:
			toreturn.append(i)
	return toreturn
def parse_for_wickets(bowl, num):
	toreturn  = []
	for i in bowl:
		temp = bowl[i]
		k = int(temp[3])
		if k == num:
			toreturn.append(i)
	return toreturn














def generate_and_solve_query5(bats,bowl,entree):
	c1 = parse_for_runs(bats,50.0)
	c2 = parse_for_wickets(bowl,1)
	name_to_var = {}
	count = 0
	for i in bats:
		if i not in name_to_var:
			name_to_var[i] = 'r' + str(count)
			count += 1
	for i in bowl:
		if i not in name_to_var:
			name_to_var[i] = 'r' + str(count)
			count += 1
	temp_strin1 = ''
	for i in name_to_var:
		temp_strin1 += i + ' => ' + name_to_var[i] + '\n'
	temp_strin2 = 'runs => {'
	for i in c1:
		temp_strin2 += name_to_var[i] +  ','
	temp_strin2 = temp_strin2[:-1]  #removing the extra "," character
	temp_strin2 += '} \n'
	temp_strin3 = 'wickets => {'
	for i in c2:
		temp_strin3 += name_to_var[i] + ','
	temp_strin3 = temp_strin3[:-1]  #removing the extra "," charater
	temp_strin3 += '}'
	v = temp_strin1 + temp_strin2 + temp_strin3
	query = 'exists x (runs(x) -> wickets(x))'
	if c1 and c2:
		val = nltk.parse_valuation(v)
		dom = val.domain
		m = nltk.Model(dom, val)
		g = nltk.Assignment(dom, [])
		l = nltk.LogicParser()
		c1 = l.parse('((runs(x)) & wickets(x))')
		varnames =  m.satisfiers(c1, 'x', g)
		for i in varnames:
			for p,q in name_to_var.iteritems():   # naive method to get key given value, in a dictionary
				if q == i:
					entree.append(p)
		return m.evaluate(query,g)




def main():
	bats1 = {}
	bowl1= {}
	bats2 = {}
	bowl2= {}
	bats3 = {}
	bowl3= {}
	bats4 = {}
	bowl4= {}
	bats5 = {}
	bowl5= {}
	mom={}
	wonby={}
	zeroes={}
	lostby={}

	bat11 = './dataset/match1/odi1_inn1_bat.txt'
	bat12 = './dataset/match1/odi1_inn2_bat.txt'
	bat21 = './dataset/match2/odi2_inn1_bat.txt'
	bat22 = './dataset/match2/odi2_inn2_bat.txt'
	bat31= './dataset/match3/odi3_inn1_bat.txt'
	bat32= './dataset/match3/odi3_inn2_bat.txt'
	bat41= './dataset/match4/odi4_inn1_bat.txt'
	bat42= './dataset/match4/odi4_inn2_bat.txt'
	bat51= './dataset/match5/odi5_inn1_bat.txt'
	bat52= './dataset/match5/odi5_inn2_bat.txt'
	
	bowl11 = './dataset/match1/odi1_inn1_bowl.txt'
	bowl12 = './dataset/match1/odi1_inn2_bowl.txt'
	bowl21= './dataset/match2/odi2_inn1_bowl.txt'
	bowl22= './dataset/match2/odi2_inn2_bowl.txt'
	bowl31= './dataset/match3/odi3_inn1_bowl.txt'
	bowl32= './dataset/match3/odi3_inn2_bowl.txt'
	bowl41= './dataset/match4/odi4_inn1_bowl.txt'
	bowl42= './dataset/match4/odi4_inn2_bowl.txt'
	bowl51= './dataset/match5/odi5_inn1_bowl.txt'
	bowl52= './dataset/match5/odi5_inn2_bowl.txt'
	
	
	
	
	
	mom1='./dataset/match1/mom.txt'
	wonby1='./dataset/match1/wonby.txt'
	mom2='./dataset/match2/mom.txt'
	wonby2='./dataset/match2/wonby.txt'
	lostby2='./dataset/match2/lostby.txt'
	mom3='./dataset/match3/mom.txt'
	wonby3='./dataset/match3/wonby.txt'
	mom4='./dataset/match4/mom.txt'
	wonby4='./dataset/match4/wonby.txt'
	mom5='./dataset/match5/mom.txt'
	wonby5='./dataset/match5/wonby.txt'





	bats1={}
	bats2={}
	bats3={}
	bats4={}
	bats5={}
	bowl1={}
	bowl2={}
	bowl3={}
	bowl4={}
	bowl5={}
	add_to_dict(bats1, bat11)
	add_to_dict(bats1, bat12)
	add_to_dict(bowl1,bowl11)
	add_to_dict(bowl1,bowl12)
	t=[]
	entree1=[]
	t.append(generate_and_solve_query5(bats1,bowl1,entree1))
	add_to_dict(bats2, bat21)
	add_to_dict(bats2, bat22)
	add_to_dict(bowl2,bowl21)
	add_to_dict(bowl2,bowl22)
	entree2=[]
	t.append(generate_and_solve_query5(bats2,bowl2,entree2))
	add_to_dict(bats3, bat31)
	add_to_dict(bats3, bat32)
	add_to_dict(bowl3,bowl31)
	add_to_dict(bowl3,bowl32)
	entree3=[]
	t.append(generate_and_solve_query5(bats3,bowl3,entree3))
	add_to_dict(bats4, bat41)
	add_to_dict(bats4, bat42)
	add_to_dict(bowl4,bowl41)
	add_to_dict(bowl4,bowl42)
	entree4=[]
	t.append(generate_and_solve_query5(bats4,bowl4,entree4))
	add_to_dict(bats5, bat51)
	add_to_dict(bats5, bat52)
	add_to_dict(bowl5,bowl51)
	add_to_dict(bowl5,bowl52)
	entree5=[]
	t.append(generate_and_solve_query5(bats5,bowl5,entree5))
	ans=''
	flag=0
	for i in range(len(t)):
		if t[i]==True:
			flag=1
	print "The answer for the query5 is : ",
	if flag==1:
		print 'True'
		print entree1
		print entree2
		print entree3
		print entree4
		print entree5

if __name__=="__main__":
	main()

